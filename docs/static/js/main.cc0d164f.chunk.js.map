{"version":3,"sources":["images/Rick_and_Morty_-_logo_(English).png","images/uknow.svg","images/alive.svg","images/died.svg","images/alien.svg","images/human.svg","services/Fetch.js","components/CharacterCard.js","components/CharacterList.js","components/Filters.js","components/Header.js","components/CharacterDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","FetchDataApi","fetch","then","response","json","data","results","map","result","id","name","species","image","origin","episode","status","CharacterCard","props","character","className","to","src","title","alt","CharacterList","characters","value","ElementCharacter","index","key","length","Filters","htmlFor","onSubmit","ev","preventDefault","type","maxLength","placeholder","onChange","handleChange","target","required","Header","logo","CharacterDetail","img","width","alive","dead","unknown","getImgStatus","human","alien","App","useState","setCharacters","characterFilter","setCharacterFilter","useEffect","dataSort","sort","a","b","localeCompare","filterByName","filter","toLowerCase","includes","getElementDetail","paramsPath","parseInt","match","params","foundCharacter","find","undefined","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc0d164f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty_-_logo_(English).75509f2e.png\";","module.exports = __webpack_public_path__ + \"static/media/uknow.ead9d02d.svg\";","module.exports = __webpack_public_path__ + \"static/media/alive.ee3b81c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/died.2ef5ea9a.svg\";","module.exports = __webpack_public_path__ + \"static/media/alien.422193e5.svg\";","module.exports = __webpack_public_path__ + \"static/media/human.7c2c3ee2.svg\";","//const ENDPOINT = 'https://rickandmortyapi.com/api/character/';\r\nconst FetchDataApi = () => {\r\n  return fetch('https://rickandmortyapi.com/api/character/')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.results.map((result) => {\r\n        return {\r\n          id: result.id,\r\n          name: result.name,\r\n          species: result.species,\r\n          image: result.image,\r\n          origin: result.origin.name,\r\n          episode: result.episode,\r\n          status: result.status,\r\n        };\r\n      });\r\n    });\r\n};\r\n\r\nexport default FetchDataApi;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction CharacterCard(props) {\r\n  const {id, image, name, species} = props.character;\r\n  return (\r\n    <li className=\"CharacterLi\">\r\n      <Link to={`/detail/${id}`} className=\"link\">\r\n        <img className=\"Img\" src={image} title={`foto de ${name}`} alt={`foto de ${name}`} />\r\n        <div className=\"ContainerInfo\">\r\n          <h4>{name}</h4>\r\n          <p>{species}</p>\r\n        </div>\r\n      </Link>\r\n    </li>\r\n  );\r\n}\r\n\r\nCharacterCard.propTypes = {\r\n  character: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    image: PropTypes.string,\r\n    name: PropTypes.string,\r\n    species: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default CharacterCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CharacterCard from './CharacterCard';\r\nimport '../stylesheets/CharacterList.css';\r\n\r\nfunction CharacterList(props) {\r\n  const {characters, value} = props;\r\n  const ElementCharacter = characters.map((character, index) => {\r\n    return <CharacterCard character={character} key={index} />;\r\n  });\r\n\r\n  return <section className=\"SectionList\">{ElementCharacter.length !== 0 ? <ul className=\"CharacterList\">{ElementCharacter}</ul> : <p className=\"ContainerInfo text-nofound\">{`No hay resultados con la palabra ${value}`}</p>}</section>;\r\n}\r\n\r\nCharacterList.propTypes = {\r\n  characters: PropTypes.arrayOf(PropTypes.object),\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default CharacterList;\r\n","import React from 'react';\r\nimport '../stylesheets/Filters.css';\r\n\r\nfunction Filters(props) {\r\n  const handleChangeInput = (ev) => {\r\n    props.handleChange(ev.target.value);\r\n  };\r\n  const handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n  };\r\n  return (\r\n    <form htmlFor=\"search-form\" className=\"Filters\" onSubmit={handleSubmit}>\r\n      <label htmlFor=\"name\"></label>\r\n      <input type=\"text\" id=\"name\" name=\"nameCharacter\" className=\"Input\" value={props.value} maxLength=\"30\" placeholder=\"Nombre del personaje\" onChange={handleChangeInput} required />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport logo from '../images/Rick_and_Morty_-_logo_(English).png';\r\nimport '../stylesheets/Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"Header\">\r\n      <img className=\"header-img\" src={logo} alt=\"Rick and Morty\" title=\"Rick and Morty\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport '../stylesheets/CharacterDetail.css';\r\n//images status\r\nimport unknown from '../images/uknow.svg';\r\nimport alive from '../images/alive.svg';\r\nimport dead from '../images/died.svg';\r\n//images species\r\nimport alien from '../images/alien.svg';\r\nimport human from '../images/human.svg';\r\n\r\nfunction CharacterDetail(props) {\r\n  const {image, name, status, species, origin, episode} = props.character;\r\n  const getImgStatus = () => {\r\n    let img;\r\n    let width = 'w-8';\r\n    switch (status) {\r\n      case 'Alive':\r\n        img = alive;\r\n        break;\r\n      case 'Dead':\r\n        img = dead;\r\n        break;\r\n      default:\r\n        img = unknown;\r\n        width = 'w-5';\r\n    }\r\n    return <img className={`iconImg ${width}`} src={img} alt={status} title={status} />;\r\n  };\r\n\r\n  return (\r\n    <section className=\"CharacterDetail\">\r\n      <Link to=\"/\" className=\"link\">\r\n        Volver\r\n      </Link>\r\n      <div className=\"container\">\r\n        <img className=\"ImgDetail\" src={image} title={name} alt={name} />\r\n\r\n        <ul className=\"Info\">\r\n          <h3 className=\"titleName\">{name}</h3>\r\n          <li className=\"pIcon bold\">\r\n            Status: <span className=\"normal\">{status}</span>\r\n            {getImgStatus()}\r\n          </li>\r\n          <li className=\"pIcon bold\">\r\n            Species: <span className=\"normal\">{species} </span>\r\n            <img className={species === 'Human' ? 'iconImg w-4' : 'iconImg w-8'} src={species === 'Human' ? human : alien} alt={species} title={species} />\r\n          </li>\r\n          <li className=\"pIcon bold\">\r\n            Origin: <span className=\"normal\">{origin}</span>\r\n          </li>\r\n          <li className=\"pIcon bold\">\r\n            Episodes: <span className=\"normal\">{episode.length}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nCharacterDetail.propTypes = {\r\n  character: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    name: PropTypes.string,\r\n    status: PropTypes.string,\r\n    origin: PropTypes.string,\r\n    species: PropTypes.string,\r\n    episode: PropTypes.arrayOf(PropTypes.string),\r\n  }),\r\n};\r\nexport default CharacterDetail;\r\n","import React, {useEffect, useState} from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport FetchDataApi from '../services/Fetch';\nimport CharacterList from './CharacterList';\nimport Filters from './Filters';\nimport Header from './Header';\nimport CharacterDetail from './CharacterDetail';\n\nimport '../stylesheets/App.css';\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [characterFilter, setCharacterFilter] = useState('');\n\n  useEffect(() => {\n    //set the data from the api and sort by name and set state characters\n    FetchDataApi().then((data) => {\n      const dataSort = data.sort(function (a, b) {\n        return a.name.localeCompare(b.name);\n      });\n      setCharacters(dataSort);\n    });\n  }, []);\n  //get value of input and save in state characterFilter\n  const getValueInput = (value) => {\n    setCharacterFilter(value);\n  };\n\n  //filter by character.name that includes characterFilter\n  const filterByName = characters.filter((character) => {\n    return character.name.toLowerCase().includes(characterFilter.toLowerCase());\n  });\n\n  //get props.match.params of the path and search the character whose id === to id params\n  const getElementDetail = (props) => {\n    const paramsPath = parseInt(props.match.params.id);\n    const foundCharacter = characters.find((character) => character.id === paramsPath);\n    if (foundCharacter !== undefined) {\n      return <CharacterDetail character={foundCharacter} />;\n    } else {\n      return <p className=\"Error\">El personaje que buscas no existe</p>;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Filters handleChange={getValueInput} value={characterFilter} />\n          <CharacterList characters={filterByName} value={characterFilter} />\n        </Route>\n        <Route path=\"/detail/:id\">{getElementDetail}</Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}