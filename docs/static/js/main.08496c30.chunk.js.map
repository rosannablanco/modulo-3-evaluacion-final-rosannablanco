{"version":3,"sources":["images/Rick_and_Morty_-_logo_(English).png","services/Fetch.js","components/CharacterCard.js","components/CharacterList.js","components/Filters.js","components/Header.js","components/CharacterDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","FetchDataApi","fetch","then","response","json","data","results","map","result","id","name","species","image","origin","episode","status","CharacterCard","props","className","to","character","src","title","alt","CharacterList","ElementCharacter","characters","index","key","Filters","htmlFor","type","maxLength","placeholder","onChange","ev","handleChange","target","value","required","Header","logo","CharacterDetail","console","log","length","App","useState","setCharacters","characterFilter","setCharacterFilter","useEffect","filterByName","filter","toLowerCase","includes","getElementDetail","paramsPath","parseInt","match","params","foundCharacter","find","undefined","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08496c30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty_-_logo_(English).75509f2e.png\";","//const ENDPOINT = 'https://rickandmortyapi.com/api/character/';\r\nconst FetchDataApi = () => {\r\n  return fetch('https://rickandmortyapi.com/api/character/')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.results.map((result) => {\r\n        return {\r\n          id: result.id,\r\n          name: result.name,\r\n          species: result.species,\r\n          image: result.image,\r\n          origin: result.origin.name,\r\n          episode: result.episode,\r\n          status: result.status,\r\n        };\r\n      });\r\n    });\r\n};\r\n\r\nexport default FetchDataApi;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <li className=\"CharacterLi\">\r\n      <Link to={`/${props.character.id}`} className=\"link\">\r\n        <img className=\"Img\" src={props.character.image} title=\"\" alt=\"\" />\r\n        <div className=\"ContainerInfo\">\r\n          <h4>{props.character.name}</h4>\r\n          <p>{props.character.species}</p>\r\n        </div>\r\n      </Link>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React from 'react';\r\n\r\nimport '../stylesheets/CharacterList.css';\r\nimport CharacterCard from './CharacterCard';\r\n\r\nfunction CharacterList(props) {\r\n  const ElementCharacter = props.characters.map((character, index) => {\r\n    return <CharacterCard character={character} key={index} />;\r\n  });\r\n\r\n  return (\r\n    <section className=\"SectionList\">\r\n      <ul className=\"CharacterList\">{ElementCharacter}</ul>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default CharacterList;\r\n","import React from 'react';\r\nimport '../stylesheets/Filters.css';\r\n\r\nfunction Filters(props) {\r\n  const handleChangeInput = (ev) => {\r\n    props.handleChange(ev.target.value);\r\n  };\r\n  return (\r\n    <form htmlFor=\"search-form\" className=\"Filters\">\r\n      <label htmlFor=\"name\"></label>\r\n      <input type=\"text\" id=\"name\" name=\"nameCharacter\" className=\"Input\" maxLength=\"30\" placeholder=\"Nombre del personaje\" onChange={handleChangeInput} required />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport logo from '../images/Rick_and_Morty_-_logo_(English).png';\r\nimport '../stylesheets/Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"Header\">\r\n      <img className=\"header-img\" src={logo} alt=\"Rick and Morty\" title=\"Rick and Morty\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport '../stylesheets/CharacterDetail.css';\r\n\r\nfunction CharacterDetail(props) {\r\n  console.log(props.character);\r\n  return (\r\n    <section className=\"CharacterDetail\">\r\n      <Link to=\"/\" className=\"link\">\r\n        Volver\r\n      </Link>\r\n      <div className=\"container\">\r\n        <img className=\"ImgDetail\" src={props.character.image} title={props.character.name} alt={props.character.name} />\r\n        <div className=\"Info\">\r\n          <h3 className=\"titleName\">{props.character.name}</h3>\r\n          <p className=\"bold\">\r\n            Status: <span className=\"normal\">{props.character.status}</span>\r\n          </p>\r\n          <p className=\"bold\">\r\n            Species: <span className=\"normal\">{props.character.species}</span>\r\n          </p>\r\n          <p className=\"bold\">\r\n            Origin: <span className=\"normal\">{props.character.origin}</span>\r\n          </p>\r\n          <p className=\"bold\">\r\n            Episodes: <span className=\"normal\">{props.character.episode.length}</span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default CharacterDetail;\r\n","import React, {useEffect, useState} from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport FetchDataApi from '../services/Fetch';\nimport CharacterList from './CharacterList';\nimport Filters from './Filters';\nimport Header from './Header';\nimport CharacterDetail from './CharacterDetail';\n\nfunction App(props) {\n  const [characters, setCharacters] = useState([]);\n  const [characterFilter, setCharacterFilter] = useState('');\n\n  useEffect(() => {\n    FetchDataApi().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n  //get value of input and set in status characterFilter\n  const getValueInput = (value) => {\n    setCharacterFilter(value);\n  };\n  //filter status character for the character name include characterFilter\n  const filterByName = characters.filter((character) => {\n    return character.name.toLowerCase().includes(characterFilter.toLowerCase());\n  });\n  const getElementDetail = (props) => {\n    const paramsPath = parseInt(props.match.params.id);\n    const foundCharacter = characters.find((character) => character.id === paramsPath);\n    if (foundCharacter !== undefined) {\n      return <CharacterDetail character={foundCharacter} />;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Filters handleChange={getValueInput} />\n          <CharacterList characters={filterByName} />\n        </Route>\n        <Route path=\"/:id\">{getElementDetail}</Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}